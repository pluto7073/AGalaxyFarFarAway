//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
//file:noinspection GradlePackageVersionRange
plugins {
	id "fabric-loom" version "1.6.+"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = archives_base_name
group = maven_group

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
String patch = buildNumber != null ? buildNumber : "99999"
version = mod_version.replace("<build>", patch)

repositories {
	maven { url = "https://maven.quiltmc.org/repository/release" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.bai.lol" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url "https://maven.teamresourceful.com/repository/maven-public/" }
}

dependencies {
	// dev environment
	minecraft("com.mojang:minecraft:$minecraft_version")
	mappings(loom.layered {
		if (qm_version != "none")
			it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
		if (parchment_version != "none")
			it.parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_version@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation("net.fabricmc:fabric-loader:$loader_version")
	modImplementation "earth.terrarium.adastra:ad_astra-fabric-$minecraft_version:$ad_astra_version"

	// dev env
	modLocalRuntime("maven.modrinth:suggestion-tweaker:$suggestion_tweaker_version")
	modLocalRuntime("maven.modrinth:cloth-config:$cloth_config_version") { exclude(group: "net.fabricmc.fabric-api") }
	modLocalRuntime("maven.modrinth:jade:$jade_version")
	modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version") { exclude(group: "net.fabricmc"); exclude(group: "net.fabricmc.fabric-api") }

	// dependencies
	modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")
}

tasks.register("buildOrPublish") {
	group = "build"
	String mavenUser = System.getenv("MAVEN_USER")
	if (mavenUser != null && !mavenUser.isEmpty()) {
		dependsOn(tasks.named("publish"))
		println("prepared for publish")
	} else {
		dependsOn(tasks.named("build"))
		println("prepared for build")
	}
}

processResources {
	Map<String, String> properties = new HashMap<>()
	properties.put("version", version)
	properties.put("loader_version", loader_version)
	properties.put("fabric_version", fabric_version)
	properties.put("minecraft_dependency", minecraft_dependency)
	properties.put("ad_astra", ad_astra_version)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		compileClasspath += main.output
		runtimeClasspath += main.runtimeClasspath
		runtimeClasspath += main.output
	}
}

loom {
	runs {
		configureEach {
			vmArg "-XX:+AllowEnhancedClassRedefinition"
			vmArg "-XX:+IgnoreUnrecognizedVMOptions"
		}

		datagen {
			client()

			name "Minecraft Datagen"

			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=galaxy_far_away"
			vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
		}

		server {
			runDir "run/server"
		}
		
		gametest {
			server()
			name "Minecraft GameTest"
			source sourceSets.testmod
			vmArg "-Dfabric-api.gametest"
			vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
			runDir "run/gametest_server"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url = "https://mvn.devos.one/${System.getenv("PUBLISH_SUFFIX")}/"
			credentials {
				username = System.getenv("MAVEN_USER")
				password = System.getenv("MAVEN_PASS")
			}
			authentication { basic(BasicAuthentication) }
		}
	}
}
